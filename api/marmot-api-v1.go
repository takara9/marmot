// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Hypervisor defines model for Hypervisor.
type Hypervisor struct {
	Cpu        int32          `json:"cpu"`
	FreeCpu    *int32         `json:"freeCpu,omitempty"`
	FreeMemory *int64         `json:"freeMemory,omitempty"`
	IpAddr     *string        `json:"ipAddr,omitempty"`
	Key        *string        `json:"key,omitempty"`
	Memory     *int64         `json:"memory,omitempty"`
	NodeName   string         `json:"nodeName"`
	Status     *int32         `json:"status,omitempty"`
	StgPool    *[]StoragePool `json:"stgPool,omitempty"`
}

// Hypervisors defines model for Hypervisors.
type Hypervisors = []Hypervisor

// MarmotConfig defines model for MarmotConfig.
type MarmotConfig struct {
	ClusterName       *string   `json:"cluster_name,omitempty"`
	Domain            *string   `json:"domain,omitempty"`
	Hypervisor        *string   `json:"hypervisor,omitempty"`
	ImageDefaultPath  *string   `json:"image_default_path,omitempty"`
	ImgaeTemplatePath *string   `json:"imgae_template_path,omitempty"`
	NetDevDefault     *string   `json:"net_dev_default,omitempty"`
	NetDevPrivate     *string   `json:"net_dev_private,omitempty"`
	NetDevPublic      *string   `json:"net_dev_public,omitempty"`
	OsVariant         *string   `json:"os_variant,omitempty"`
	PrivateIpSubnet   *string   `json:"private_ip_subnet,omitempty"`
	PublicIpDns       *string   `json:"public_ip_dns,omitempty"`
	PublicIpGw        *string   `json:"public_ip_gw,omitempty"`
	PublicIpSubnet    *string   `json:"public_ip_subnet,omitempty"`
	Qcow2Image        *string   `json:"qcow2_image,omitempty"`
	VmSpec            *[]VmSpec `json:"vm_spec,omitempty"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ReplyMessage defines model for ReplyMessage.
type ReplyMessage struct {
	Message string `json:"message"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// Storage defines model for storage.
type Storage struct {
	Lv   *string `json:"lv,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
	Size *int64  `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
	Vg   *string `json:"vg,omitempty"`
}

// StoragePool defines model for storagePool.
type StoragePool struct {
	FreeCap  *int64  `json:"freeCap,omitempty"`
	Type     *string `json:"type,omitempty"`
	VgCap    *int64  `json:"vgCap,omitempty"`
	VolGroup *string `json:"volGroup,omitempty"`
}

// VirtualMachine defines model for virtualMachine.
type VirtualMachine struct {
	HvNode      string     `json:"HvNode"`
	CTime       *time.Time `json:"cTime,omitempty"`
	ClusterName *string    `json:"clusterName,omitempty"`
	Comment     *string    `json:"comment,omitempty"`
	Cpu         *int32     `json:"cpu,omitempty"`
	Key         *string    `json:"key,omitempty"`
	Memory      *int64     `json:"memory,omitempty"`
	Name        string     `json:"name"`
	OsLv        *string    `json:"osLv,omitempty"`
	OsVariant   *string    `json:"osVariant,omitempty"`
	OsVg        *string    `json:"osVg,omitempty"`
	Playbook    *string    `json:"playbook,omitempty"`
	PrivateIp   *string    `json:"privateIp,omitempty"`
	PublicIp    *string    `json:"publicIp,omitempty"`
	STime       *time.Time `json:"sTime,omitempty"`
	Status      *int32     `json:"status,omitempty"`
	Storage     *[]Storage `json:"storage,omitempty"`
	Uuid        *string    `json:"uuid,omitempty"`
}

// VirtualMachines defines model for virtualMachines.
type VirtualMachines = []VirtualMachine

// VmSpec defines model for vmSpec.
type VmSpec struct {
	Comment       *string    `json:"comment,omitempty"`
	Cpu           *int32     `json:"cpu,omitempty"`
	Key           *string    `json:"key,omitempty"`
	Memory        *int64     `json:"memory,omitempty"`
	Name          *string    `json:"name,omitempty"`
	Ostemplv      *string    `json:"ostemplv,omitempty"`
	Ostempvariant *string    `json:"ostempvariant,omitempty"`
	Ostempvg      *string    `json:"ostempvg,omitempty"`
	Playbook      *string    `json:"playbook,omitempty"`
	PrivateIp     *string    `json:"private_ip,omitempty"`
	PublicIp      *string    `json:"public_ip,omitempty"`
	Storage       *[]Storage `json:"storage,omitempty"`
	Uuid          *string    `json:"uuid,omitempty"`
}

// ListHypervisorsParams defines parameters for ListHypervisors.
type ListHypervisorsParams struct {
	// Limit How many items to return at one time (max 100)
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = MarmotConfig

// CreateVirtualMachineJSONRequestBody defines body for CreateVirtualMachine for application/json ContentType.
type CreateVirtualMachineJSONRequestBody = VmSpec

// DestroyClusterJSONRequestBody defines body for DestroyCluster for application/json ContentType.
type DestroyClusterJSONRequestBody = MarmotConfig

// DestroyVirtualMachineJSONRequestBody defines body for DestroyVirtualMachine for application/json ContentType.
type DestroyVirtualMachineJSONRequestBody = VmSpec

// StartClusterJSONRequestBody defines body for StartCluster for application/json ContentType.
type StartClusterJSONRequestBody = MarmotConfig

// StartVirtualMachineJSONRequestBody defines body for StartVirtualMachine for application/json ContentType.
type StartVirtualMachineJSONRequestBody = VmSpec

// StopClusterJSONRequestBody defines body for StopCluster for application/json ContentType.
type StopClusterJSONRequestBody = MarmotConfig

// StopVirtualMachineJSONRequestBody defines body for StopVirtualMachine for application/json ContentType.
type StopVirtualMachineJSONRequestBody = VmSpec

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Cluster of Virtual Machines
	// (POST /createCluster)
	CreateCluster(ctx echo.Context) error
	// Create Virtual Machine
	// (POST /createVm)
	CreateVirtualMachine(ctx echo.Context) error
	// Destroy Cluster of Virtual Machines
	// (POST /destroyCluster)
	DestroyCluster(ctx echo.Context) error
	// Destroy Virtual Machines
	// (POST /destroyVm)
	DestroyVirtualMachine(ctx echo.Context) error
	// Info for a specific hypervisor
	// (GET /hypervisor/{hypervisorId})
	ShowHypervisorById(ctx echo.Context, hypervisorId string) error
	// List Hypervisors
	// (GET /hypervisors)
	ListHypervisors(ctx echo.Context, params ListHypervisorsParams) error
	// Alive
	// (GET /ping)
	ReplyPing(ctx echo.Context) error
	// Start Cluster of Virtual Machines
	// (POST /startCluster)
	StartCluster(ctx echo.Context) error
	// Start Virtual Machine
	// (POST /startVm)
	StartVirtualMachine(ctx echo.Context) error
	// Stop Cluster of Virtual Machines
	// (POST /stopCluster)
	StopCluster(ctx echo.Context) error
	// Stop Virtual Machines
	// (POST /stopVm)
	StopVirtualMachine(ctx echo.Context) error
	// Get Version
	// (GET /version)
	GetVersion(ctx echo.Context) error
	// List Virtual Machines
	// (GET /virtualMachines)
	ListVirtualMachines(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// CreateVirtualMachine converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVirtualMachine(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVirtualMachine(ctx)
	return err
}

// DestroyCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DestroyCluster(ctx)
	return err
}

// DestroyVirtualMachine converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyVirtualMachine(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DestroyVirtualMachine(ctx)
	return err
}

// ShowHypervisorById converts echo context to params.
func (w *ServerInterfaceWrapper) ShowHypervisorById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hypervisorId" -------------
	var hypervisorId string

	err = runtime.BindStyledParameterWithOptions("simple", "hypervisorId", ctx.Param("hypervisorId"), &hypervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hypervisorId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShowHypervisorById(ctx, hypervisorId)
	return err
}

// ListHypervisors converts echo context to params.
func (w *ServerInterfaceWrapper) ListHypervisors(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHypervisorsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListHypervisors(ctx, params)
	return err
}

// ReplyPing converts echo context to params.
func (w *ServerInterfaceWrapper) ReplyPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReplyPing(ctx)
	return err
}

// StartCluster converts echo context to params.
func (w *ServerInterfaceWrapper) StartCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCluster(ctx)
	return err
}

// StartVirtualMachine converts echo context to params.
func (w *ServerInterfaceWrapper) StartVirtualMachine(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartVirtualMachine(ctx)
	return err
}

// StopCluster converts echo context to params.
func (w *ServerInterfaceWrapper) StopCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopCluster(ctx)
	return err
}

// StopVirtualMachine converts echo context to params.
func (w *ServerInterfaceWrapper) StopVirtualMachine(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopVirtualMachine(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// ListVirtualMachines converts echo context to params.
func (w *ServerInterfaceWrapper) ListVirtualMachines(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListVirtualMachines(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/createCluster", wrapper.CreateCluster)
	router.POST(baseURL+"/createVm", wrapper.CreateVirtualMachine)
	router.POST(baseURL+"/destroyCluster", wrapper.DestroyCluster)
	router.POST(baseURL+"/destroyVm", wrapper.DestroyVirtualMachine)
	router.GET(baseURL+"/hypervisor/:hypervisorId", wrapper.ShowHypervisorById)
	router.GET(baseURL+"/hypervisors", wrapper.ListHypervisors)
	router.GET(baseURL+"/ping", wrapper.ReplyPing)
	router.POST(baseURL+"/startCluster", wrapper.StartCluster)
	router.POST(baseURL+"/startVm", wrapper.StartVirtualMachine)
	router.POST(baseURL+"/stopCluster", wrapper.StopCluster)
	router.POST(baseURL+"/stopVm", wrapper.StopVirtualMachine)
	router.GET(baseURL+"/version", wrapper.GetVersion)
	router.GET(baseURL+"/virtualMachines", wrapper.ListVirtualMachines)

}
