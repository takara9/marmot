// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// CreateVmClusterJSONBody defines parameters for CreateVmCluster.
type CreateVmClusterJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// UpdateVmClusterJSONBody defines parameters for UpdateVmCluster.
type UpdateVmClusterJSONBody struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CreateVmClusterJSONRequestBody defines body for CreateVmCluster for application/json ContentType.
type CreateVmClusterJSONRequestBody CreateVmClusterJSONBody

// UpdateVmClusterJSONRequestBody defines body for UpdateVmCluster for application/json ContentType.
type UpdateVmClusterJSONRequestBody UpdateVmClusterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Hypervisors
	// (GET /hypervisors)
	ListHypervisors(ctx echo.Context) error
	// Alive
	// (GET /ping)
	GetPong(ctx echo.Context) error
	// Get Version
	// (GET /version)
	GetVersion(ctx echo.Context) error
	// List Virtual Machines
	// (GET /virtual-machines)
	ListVirtualMachines(ctx echo.Context) error
	// Delete VM Cluster
	// (DELETE /vm-clusters)
	DeleteVmCluster(ctx echo.Context) error
	// List VM Clusters
	// (GET /vm-clusters)
	ListVmClusters(ctx echo.Context) error
	// Create VM Cluster
	// (POST /vm-clusters)
	CreateVmCluster(ctx echo.Context) error
	// Update VM Cluster
	// (PUT /vm-clusters)
	UpdateVmCluster(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListHypervisors converts echo context to params.
func (w *ServerInterfaceWrapper) ListHypervisors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListHypervisors(ctx)
	return err
}

// GetPong converts echo context to params.
func (w *ServerInterfaceWrapper) GetPong(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPong(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// ListVirtualMachines converts echo context to params.
func (w *ServerInterfaceWrapper) ListVirtualMachines(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListVirtualMachines(ctx)
	return err
}

// DeleteVmCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteVmCluster(ctx)
	return err
}

// ListVmClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListVmClusters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListVmClusters(ctx)
	return err
}

// CreateVmCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVmCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVmCluster(ctx)
	return err
}

// UpdateVmCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVmCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateVmCluster(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hypervisors", wrapper.ListHypervisors)
	router.GET(baseURL+"/ping", wrapper.GetPong)
	router.GET(baseURL+"/version", wrapper.GetVersion)
	router.GET(baseURL+"/virtual-machines", wrapper.ListVirtualMachines)
	router.DELETE(baseURL+"/vm-clusters", wrapper.DeleteVmCluster)
	router.GET(baseURL+"/vm-clusters", wrapper.ListVmClusters)
	router.POST(baseURL+"/vm-clusters", wrapper.CreateVmCluster)
	router.PUT(baseURL+"/vm-clusters", wrapper.UpdateVmCluster)

}
