package main

import (
	"fmt"
	//"encoding/json"
	//"strings"
	"io"
	"log"
	"os"
	"regexp"
	cf "github.com/takara9/marmot/pkg/config"
	//db "github.com/takara9/marmot/pkg/db"
)


func generate_all(cnf cf.MarmotConfig) {
	//fmt.Println("test", cnf)
	generate_inventory(cnf)
	generate_hosts(cnf, "playbook/base_linux/templates/hosts.j2")
	generate_vars(cnf, "playbook/vars/main.yaml")
}

// Ansible Playbook 変数ファイルを作成する
func generate_vars(cnf cf.MarmotConfig, fn string) {

	_, err := os.Stat(fn)
	if  err != nil {
		return
	}

        vars_file, err := os.Create(fn)
        if err != nil {
		log.Println(err)
         }
        defer vars_file.Close()

	vars_file.WriteString(fmt.Sprintf("## Generated by mactl gen-inv\n"))
	vars_file.WriteString(fmt.Sprintf("nodes:\n"))

	var line string
	re_node, err   := regexp.Compile("^node[1-9]")
	for _,x := range cnf.VMSpec {
		// ワーカーノードのみに制限する
		if (re_node.MatchString(x.Name)) {
			if len(x.PublicIP) > 0 {
				line = fmt.Sprintf("  - { name: \"%s\", pub_ip: \"%s\", pri_ip: \"%s\" }\n", x.Name, x.PublicIP, x.PrivateIP)
			} else {
				line = fmt.Sprintf("  - { name: \"%s\", pri_ip: \"%s\" }\n", x.Name, x.PrivateIP)
			}
			vars_file.WriteString(line)
		}
	}
}


// Ansible Playbook Template hostsファイルを作成する
func generate_hosts(cnf cf.MarmotConfig, fn string) error {

	_, err := os.Stat(fn)
	if  err != nil {
		return err
	}

        hosts_file, err := os.Create(fn)
        if err != nil {
		log.Println(err)
		return err
         }
        defer hosts_file.Close()

	hosts_file.WriteString(fmt.Sprintf("## Generated by mactl gen-inv\n"))
	hosts_file.WriteString(fmt.Sprintf("%s  %s\n", "127.0.0.1", "localhost  localhost.localdomain"))
	for _,x := range cnf.VMSpec {
		line := fmt.Sprintf("%s  %s\n", x.PrivateIP, x.Name)
		hosts_file.WriteString(line)
	}
	return nil

}



// Ansibleのインベントリファイルを作成する
func generate_inventory(cnf cf.MarmotConfig) error {

        inventory_file, err := os.Create("inventory")
        if err != nil {
		log.Println(err)
		return err
         }
        defer inventory_file.Close()

	// インベントリ書き込み
	inventory_file.WriteString(fmt.Sprintf("# Generate by mactl gen-inv\n"))

	re_master, err := regexp.Compile("^master[1-9]")
	re_node, err   := regexp.Compile("^node[1-9]")
	re_elb, err    := regexp.Compile("^elb[1-9]")
	re_mlb, err    := regexp.Compile("^mlb[1-9]")

	var ct_master uint64 = 0
	var ct_node   uint64 = 0
	var ct_elb    uint64 = 0
	var ct_mlb    uint64 = 0

	for _,x := range cnf.VMSpec {
		if (re_master.MatchString(x.Name)) {
			ct_master++
		}

		if (re_node.MatchString(x.Name)) {
			ct_node++
		}

		if (re_elb.MatchString(x.Name)) {
			ct_elb++
		}
		if (re_mlb.MatchString(x.Name)) {
			ct_mlb++
		}

		line := fmt.Sprintf("%s  ansible_ssh_host=%s  ansible_ssh_private_key_file=~/.ssh/id_rsa  ansible_ssh_user=root\n", x.Name, x.PrivateIP)
		inventory_file.WriteString(line)
	}

	inventory_file.WriteString(fmt.Sprintf("\n"))
	if ct_master > 0 {
		inventory_file.WriteString(fmt.Sprintln("[masters]"))
		inventory_file.WriteString(fmt.Sprintf("master[1:%d]\n\n", ct_master))
	}
	if ct_node > 0 {
		inventory_file.WriteString(fmt.Sprintln("[nodes]"))
		inventory_file.WriteString(fmt.Sprintf("node[1:%d]\n\n", ct_node))
	}
	if ct_elb > 0 {
		inventory_file.WriteString(fmt.Sprintln("[elbs]"))
		inventory_file.WriteString(fmt.Sprintf("elb[1:%d]\n\n", ct_elb))
	}
	if ct_mlb > 0 {
		inventory_file.WriteString(fmt.Sprintln("[mlbs]"))
		inventory_file.WriteString(fmt.Sprintf("mlb[1:%d]\n\n", ct_mlb))
	}
	inventory_file.WriteString(fmt.Sprintf("\n"))


	// グローバル変数ファイルの存在チェックなければ、終了
	fn := "ansible-vars.yaml"
	_, err = os.Stat(fn)
	if  err != nil {
		return err
	}

	// グローバル変数ファイルの結合
	ansible_vars, err := os.Open(fn)
        if err != nil {
		log.Println(err)
		return err
         }
        defer ansible_vars.Close()


	// インベントリファイルへ追記
        byteData, err := io.ReadAll(ansible_vars)
        if err != nil {
		log.Println(err)
		return err
        }
	inventory_file.Write(byteData)
	return nil
}


